#ifndef __BITMAP_FONT_HPP__
#define __BITMAP_FONT_HPP__

#include <glt/api.hpp>

#include <vector>
#include <array>
#include <cstdint>

namespace glt {

/**
 * Represents a bitmap font image that is generated by
 * Codehead's Bitmap Font Generator which can be found at
 * http://www.codehead.co.uk/cbfg/
 *
 * One output of the generator (and the program's default)
 * is a custom .bff file, which this class represents.  The
 * file format is as follows in order:
 *
 *    uint16     magic number 0xBFF2 (0xF2BF little-endian)
 *    int32      width of the image
 *    int32      height of the image
 *    int32      width of a single character cell
 *    int32      height of a single character cell
 *    int8       bits per pixel (either 8, 24, 32)
 *    int8       index of the starting character in the ascii table
 *               (the program chooses 32 by default which is a space)
 *
 *    int8[256]  Array containing the widths of each character represented
 *               in the bitmap.  Note this is different from the cell width
 *               as each character varies in width.  Typically the character
 *               width is less than the cell width.  Also, this array acts
 *               as a hash table where the keys are ascii character indexes.
 *               So the exclamation mark, which has an ascii index of 33,
 *               will have its width stored at position 33 in the array.  The
 *               starting ascii index specified earlier has no bearing on
 *               this array.  So if the start index is 32 then positions
 *               0 to 31 will have meaningless width information.
 *
 *    The rest of the data in bitmap contains the actual image.  The amount
 *    of this data is dependent on the resolution the bitmap was generated
 *    with and how many bits per pixel for the image.
 */
class GLT_API BitmapFont final {
public:
    /** Constructs a bitmap font from the given file path. */
    explicit BitmapFont(const char * filename);

    /** 
     * Constructs a bitmap font from raw data. 
     *
     * @param rawdata   pointer to the data
     * @param numBytes  number of bytes of the raw data
     */
    BitmapFont(const char * rawdata, size_t numBytes);

    // Character width array as specified above.
    using CharWidths = std::array<std::int8_t, 256>;
    const CharWidths & characterWidths() const { return _charWidths; }

    // image data
    const std::uint8_t * image() const { return _image.data(); }
    const std::size_t    size()  const { return _image.size(); }

    // Various properties of the image as specified above.
    std::int8_t  bitsPerPixel() const { return _bpp; }
    std::int8_t  asciiStart()   const { return _asciiStart; }
    std::int32_t imageWidth()   const { return _imageWidth; }
    std::int32_t imageHeight()  const { return _imageHeight; }
    std::int32_t cellWidth()    const { return _cellWidth; }
    std::int32_t cellHeight()   const { return _cellHeight; }

private:
    std::vector<std::uint8_t> _image;
    CharWidths                _charWidths;

    std::int8_t  _bpp, _asciiStart;
    std::int32_t _imageWidth, _imageHeight, _cellWidth, _cellHeight;
};

} // end namespace glt

#endif // __BITMAP_FONT_HPP__
